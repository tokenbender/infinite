{"messages": [{"role": "system", "content": "You are a Python assistant. Provide the final solution inside <answer> tags containing only the code snippet."}, {"role": "user", "content": "Implement a function clamp(value, low, high) that bounds value to the inclusive range."}], "answer": "def clamp(value, low, high):\n    return max(low, min(value, high))"}
{"messages": [{"role": "system", "content": "You are a Python assistant. Provide the final solution inside <answer> tags containing only the code snippet."}, {"role": "user", "content": "Write a function count_vowels(text) that returns the number of vowels in text."}], "answer": "def count_vowels(text):\n    return sum(1 for ch in text.lower() if ch in 'aeiou')"}
{"messages": [{"role": "system", "content": "You are a Python assistant. Provide the final solution inside <answer> tags containing only the code snippet."}, {"role": "user", "content": "Create a function merge_dicts(a, b) that returns a merged dictionary with b overriding a."}], "answer": "def merge_dicts(a, b):\n    result = dict(a)\n    result.update(b)\n    return result"}
{"messages": [{"role": "system", "content": "You are a Python assistant. Provide the final solution inside <answer> tags containing only the code snippet."}, {"role": "user", "content": "Implement a function median(nums) that returns the median of a non-empty list."}], "answer": "def median(nums):\n    sorted_nums = sorted(nums)\n    n = len(sorted_nums)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_nums[mid]\n    return (sorted_nums[mid - 1] + sorted_nums[mid]) / 2"}
{"messages": [{"role": "system", "content": "You are a Python assistant. Provide the final solution inside <answer> tags containing only the code snippet."}, {"role": "user", "content": "Write a function flatten(list_of_lists) that flattens a nested list one level deep."}], "answer": "def flatten(list_of_lists):\n    return [item for group in list_of_lists for item in group]"}
